<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Guessing Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .section {
            display: none;
        }
        .section.active {
            display: block;
        }
        .chat-bubble {
            max-width: 75%;
            padding: 8px 12px;
            border-radius: 12px;
            word-wrap: break-word;
        }
        .chat-bubble-user {
            background-color: #3B82F6;
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 4px;
        }
        .chat-bubble-other {
            background-color: #E5E7EB;
            color: #1F2937;
            align-self: flex-start;
            border-bottom-left-radius: 4px;
        }
        .chat-bubble-system {
            background-color: #f3f4f6;
            color: #6b7280;
            align-self: center;
            font-size: 0.875rem;
            font-style: italic;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">

    <div class="w-full max-w-md mx-auto bg-white rounded-2xl shadow-xl p-6 transition-all duration-500">

        <!-- Loading Section -->
        <div id="loading-section" class="section active text-center">
            <h1 class="text-2xl font-bold text-gray-800">Guessing Game</h1>
            <p class="text-gray-600 mt-2">Connecting...</p>
        </div>

        <!-- Lobby Section -->
        <div id="lobby-section" class="section">
            <h1 class="text-2xl font-bold text-gray-800 text-center">Join a Game</h1>
            <div class="mt-6">
                <button id="create-game-btn" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded-lg transition duration-300 ease-in-out transform hover:scale-105">
                    Start a New Game
                </button>
            </div>
            <div class="mt-4 text-center text-gray-500">OR</div>
            <div class="mt-4">
                <input type="text" id="join-game-input" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none" placeholder="Enter Game ID to Join">
                <button id="join-game-btn" class="mt-2 w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded-lg transition duration-300 ease-in-out transform hover:scale-105">
                    Join Game
                </button>
            </div>
            <p id="lobby-error" class="text-red-500 text-center mt-4"></p>
        </div>

        <!-- Waiting Room Section -->
        <div id="waiting-room-section" class="section">
            <h2 class="text-xl font-bold text-gray-800 text-center">Waiting Room</h2>
            <div class="mt-4 text-center">
                <p class="text-gray-600">Share this Game ID with your friends:</p>
                <p id="game-id-display" class="text-2xl font-bold text-blue-600 bg-blue-50 p-2 rounded-lg mt-2 cursor-pointer" onclick="copyGameId()"></p>
                <p class="text-sm text-gray-400">(Click to copy)</p>
            </div>
            <div class="mt-6">
                <h3 class="font-semibold text-lg text-gray-700">Players (<span id="player-count">0</span>)</h3>
                <ul id="player-list" class="mt-2 space-y-2"></ul>
            </div>
             <div id="game-master-controls" class="hidden mt-6">
                <h3 class="font-semibold text-lg text-gray-700">Game Master Controls</h3>
                <input type="text" id="question-input" class="w-full p-3 border border-gray-300 rounded-lg mt-2 focus:ring-2 focus:ring-blue-500 focus:outline-none" placeholder="Enter your question">
                <input type="text" id="answer-input" class="w-full p-3 border border-gray-300 rounded-lg mt-2 focus:ring-2 focus:ring-blue-500 focus:outline-none" placeholder="Enter the answer">
                <button id="start-game-btn" class="mt-4 w-full bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-4 rounded-lg transition duration-300 ease-in-out transform hover:scale-105 disabled:bg-gray-400 disabled:cursor-not-allowed" disabled>
                    Start Game
                </button>
                <p id="start-game-error" class="text-red-500 text-center mt-2"></p>
            </div>
            <button id="leave-game-btn" class="mt-6 w-full bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg">Leave Game</button>
        </div>

        <!-- Game Section -->
        <div id="game-section" class="section">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-bold text-gray-800">Guess the Answer!</h2>
                <div class="text-lg font-semibold text-red-500">
                    Time: <span id="timer-display">60</span>s
                </div>
            </div>
            <div class="bg-gray-100 p-4 rounded-lg mb-4">
                <p class="text-center font-semibold text-gray-700" id="question-display"></p>
            </div>
            <div id="chat-box" class="h-64 overflow-y-auto bg-gray-50 p-3 rounded-lg flex flex-col gap-3 mb-4 border">
                <!-- Chat messages will appear here -->
            </div>
            <div id="game-result" class="hidden text-center p-4 rounded-lg mb-4"></div>
            <div class="flex gap-2">
                <input type="text" id="guess-input" class="flex-grow p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none" placeholder="Type your guess...">
                <button id="submit-guess-btn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded-lg">
                    Send
                </button>
            </div>
            <div class="mt-2 text-center text-gray-500">
                Attempts left: <span id="attempts-left-display" class="font-bold">3</span>
            </div>
             <p id="user-id-display" class="text-xs text-center text-gray-400 mt-4"></p>
        </div>
    </div>
    
    <script type="module">
        // Socket.IO client implementation
        // Load Socket.IO client script dynamically and handle failure gracefully
    function loadSocketIoScript(timeout = 5000, baseUrl = '') {
            return new Promise((resolve, reject) => {
                // If already loaded
                if (typeof io === 'function') return resolve();
        const script = document.createElement('script');
        script.src = baseUrl ? (baseUrl.replace(/\/$/, '') + '/socket.io/socket.io.js') : '/socket.io/socket.io.js';
                script.async = true;

                const timer = setTimeout(() => {
                    script.onerror = script.onload = null;
                    reject(new Error('Socket.IO client load timeout'));
                }, timeout);

                script.onload = () => {
                    clearTimeout(timer);
                    if (typeof io === 'function') resolve();
                    else reject(new Error('Socket.IO client did not expose io()'));
                };

                script.onerror = (e) => {
                    clearTimeout(timer);
                    reject(new Error('Failed to load Socket.IO client'));
                };

                document.head.appendChild(script);
            });
        }

        // Global state
        // Use sessionStorage only so each browser tab gets a unique client id for easier testing.
        let currentClientId = sessionStorage.getItem('clientId') || null;
        if (!currentClientId) {
            currentClientId = 'c_' + Math.random().toString(36).substring(2, 9);
            sessionStorage.setItem('clientId', currentClientId);
        }

        const sections = {
            loading: document.getElementById('loading-section'),
            lobby: document.getElementById('lobby-section'),
            waiting: document.getElementById('waiting-room-section'),
            game: document.getElementById('game-section'),
        };

        const createGameBtn = document.getElementById('create-game-btn');
        const joinGameInput = document.getElementById('join-game-input');
        const joinGameBtn = document.getElementById('join-game-btn');
        const lobbyError = document.getElementById('lobby-error');
        const gameIdDisplay = document.getElementById('game-id-display');
        const playerCount = document.getElementById('player-count');
        const playerList = document.getElementById('player-list');
        const gameMasterControls = document.getElementById('game-master-controls');
        const questionInput = document.getElementById('question-input');
        const answerInput = document.getElementById('answer-input');
        const startGameBtn = document.getElementById('start-game-btn');
        const startGameError = document.getElementById('start-game-error');
        const leaveGameBtn = document.getElementById('leave-game-btn');
        const questionDisplay = document.getElementById('question-display');
        const timerDisplay = document.getElementById('timer-display');
        const chatBox = document.getElementById('chat-box');
        const guessInput = document.getElementById('guess-input');
        const submitGuessBtn = document.getElementById('submit-guess-btn');
        const attemptsLeftDisplay = document.getElementById('attempts-left-display');
        const gameResult = document.getElementById('game-result');
        const userIdDisplay = document.getElementById('user-id-display');

        let socket = null;
        let currentGameId = null;
        let timerInterval = null;
        let isGameMaster = false;

        function switchSection(sectionName) {
            Object.values(sections).forEach(section => section.classList.remove('active'));
            if (sections[sectionName]) sections[sectionName].classList.add('active');
        }

        function connectSocket() {
            if (socket && socket.connected) return;
            if (typeof io !== 'function') {
                lobbyError.textContent = 'Realtime client not available. Please reload the page.';
                switchSection('lobby');
                return;
            }

            socket = io();

            socket.on('connect', () => {
                lobbyError.textContent = '';
                socket.emit('hello', currentClientId);
                userIdDisplay.textContent = `My ID: ${currentClientId}`;
                switchSection('lobby');
            });

            // helpful debug
            socket.onAny((ev, ...args) => {
                // console.debug('socket event', ev, args);
            });


        // Wait for socket to be connected before emitting
        function ensureConnected(timeout = 5000) {
            return new Promise((resolve, reject) => {
                if (!socket) return reject(new Error('Socket not initialized'));
                if (socket.connected) return resolve();
                const timer = setTimeout(() => {
                    socket.off('connect', onConnect);
                    reject(new Error('Timed out waiting for socket connect'));
                }, timeout);
                function onConnect() {
                    clearTimeout(timer);
                    socket.off('connect', onConnect);
                    resolve();
                }
                socket.on('connect', onConnect);
            });
        }
            socket.on('hello_ack', (data) => {
                if (data && data.clientId) {
                    currentClientId = data.clientId;
                    localStorage.setItem('clientId', currentClientId);
                    userIdDisplay.textContent = `My ID: ${currentClientId}`;
                }
            });

            socket.on('game_update', (gameData) => {
                // if the game was deleted, backend will simply stop sending updates. We handle missing.
                updateUI(gameData);
            });

            socket.on('disconnect', (reason) => {
                // show lobby so user can retry or create a new game
                switchSection('lobby');
                lobbyError.textContent = 'Disconnected from server. ' + (reason || '');
            });

            socket.on('connect_error', (err) => {
                lobbyError.textContent = 'Could not connect to server.';
                console.error('connect_error', err);
                switchSection('lobby');
            });
        }

        function updateUI(gameData) {
            if (!gameData) return;
            playerCount.textContent = (gameData.players || []).length;
            playerList.innerHTML = '';
            (gameData.players || []).forEach(player => {
                const li = document.createElement('li');
                li.className = "flex justify-between items-center bg-gray-100 p-2 rounded-lg";
                let text = `Player ${player.id.substring(0, 5)}`;
                if (player.isGameMaster) text += ' (GM)';
                if (player.id === currentClientId) text += ' (You)';

                const nameSpan = document.createElement('span');
                nameSpan.textContent = text;

                const scoreSpan = document.createElement('span');
                scoreSpan.className = "font-bold text-blue-600";
                scoreSpan.textContent = `Score: ${player.score}`;

                li.appendChild(nameSpan);
                li.appendChild(scoreSpan);
                playerList.appendChild(li);
            });

            isGameMaster = gameData.gameMasterId === currentClientId;

            if (gameData.status === 'waiting') {
                switchSection('waiting');
                gameIdDisplay.textContent = gameData.id || '';
                gameMasterControls.classList.toggle('hidden', !isGameMaster);
                startGameBtn.disabled = (gameData.players || []).length < 2 || !isGameMaster;
            } else if (gameData.status === 'in-progress') {
                switchSection('game');
                questionDisplay.textContent = gameData.question || '';
                const me = (gameData.players || []).find(p => p.id === currentClientId) || { attempts: 0 };
                attemptsLeftDisplay.textContent = me.attempts || 0;

                submitGuessBtn.disabled = false;
                guessInput.disabled = false;
                gameResult.classList.add('hidden');

                if (gameData.startTime && !timerInterval) {
                    startTimer(gameData.startTime);
                }
            } else if (gameData.status === 'ended') {
                if (timerInterval) { clearInterval(timerInterval); timerInterval = null; }
                switchSection('game');
                questionDisplay.textContent = gameData.question || '';
                submitGuessBtn.disabled = true;
                guessInput.disabled = true;

                if (gameData.winnerId) {
                    gameResult.className = 'text-center p-4 rounded-lg mb-4 bg-green-100 text-green-800';
                    if (gameData.winnerId === currentClientId) {
                        gameResult.innerHTML = `<h3 class="font-bold text-lg">You have won!</h3><p>The answer was: <strong>${gameData.answer}</strong></p>`;
                    } else {
                        gameResult.innerHTML = `<h3 class="font-bold text-lg">Player ${gameData.winnerId.substring(0,5)} won!</h3><p>The answer was: <strong>${gameData.answer}</strong></p>`;
                    }
                } else {
                    gameResult.className = 'text-center p-4 rounded-lg mb-4 bg-red-100 text-red-800';
                    gameResult.innerHTML = `<h3 class="font-bold text-lg">Time's up!</h3><p>The correct answer was: <strong>${gameData.answer}</strong></p>`;
                }
            }

            // Update chat
            chatBox.innerHTML = '';
            (gameData.messages || []).forEach(msg => {
                const bubble = document.createElement('div');
                bubble.classList.add('chat-bubble');
                bubble.textContent = `${msg.senderId.substring(0,5)}: ${msg.text}`;
                if (msg.senderId === currentClientId) bubble.classList.add('chat-bubble-user'); else bubble.classList.add('chat-bubble-other');
                chatBox.appendChild(bubble);
            });
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        function startTimer(startTime) {
            const start = Number(startTime);
            const sixty = 60 * 1000;
            if (!start) return;
            if (timerInterval) clearInterval(timerInterval);
            timerInterval = setInterval(() => {
                const now = Date.now();
                const elapsed = now - start;
                const left = Math.max(0, Math.ceil((sixty - elapsed) / 1000));
                timerDisplay.textContent = left;
                if (left <= 0) {
                    clearInterval(timerInterval);
                    timerInterval = null;
                }
            }, 1000);
        }

        // Actions
        createGameBtn.addEventListener('click', async () => {
            lobbyError.textContent = '';
            try {
                connectSocket();
                // wait until connected before creating
                await ensureConnected();
                socket.emit('create_game', (res) => {
                    console.log('create_game response', res);
                    if (!res || !res.ok) { lobbyError.textContent = 'Could not create game'; return; }
                    currentGameId = res.gameId;
                    gameIdDisplay.textContent = currentGameId;
                    switchSection('waiting');
                });
            } catch (err) {
                console.error('create_game failed', err);
                lobbyError.textContent = 'Could not connect to server to create game.';
            }
        });

        joinGameBtn.addEventListener('click', async () => {
            lobbyError.textContent = '';
            const id = (joinGameInput.value || '').trim();
            if (!id) { lobbyError.textContent = 'Please enter a Game ID.'; return; }
            try {
                connectSocket();
                await ensureConnected();
                socket.emit('join_game', id, (res) => {
                    console.log('join_game response', res);
                    if (!res || !res.ok) { lobbyError.textContent = res && res.error ? res.error : 'Could not join game'; return; }
                    currentGameId = id.toUpperCase();
                    gameIdDisplay.textContent = currentGameId;
                    switchSection('waiting');
                });
            } catch (err) {
                console.error('join_game failed', err);
                lobbyError.textContent = 'Could not connect to server to join game.';
            }
        });

        startGameBtn.addEventListener('click', () => {
            startGameError.textContent = '';
            const question = questionInput.value.trim();
            const answer = answerInput.value.trim();
            if (!question || !answer) { startGameError.textContent = 'Please provide a question and an answer.'; return; }
            socket.emit('start_game', { gameId: currentGameId, question, answer }, (res) => {
                if (!res || !res.ok) startGameError.textContent = res && res.error ? res.error : 'Could not start game';
            });
        });

        leaveGameBtn.addEventListener('click', () => {
            if (!currentGameId) return;
            socket.emit('leave_game', currentGameId, (res) => {
                currentGameId = null;
                switchSection('lobby');
            });
        });

        submitGuessBtn.addEventListener('click', () => {
            const g = guessInput.value.trim();
            if (!g || !currentGameId) return;
            guessInput.value = '';
            socket.emit('submit_guess', { gameId: currentGameId, guess: g }, (res) => {
                // optionally handle response
            });
        });

        guessInput.addEventListener('keyup', (e) => { if (e.key === 'Enter') submitGuessBtn.click(); });

        window.addEventListener('beforeunload', () => { if (socket && currentGameId) socket.emit('leave_game', currentGameId); });

        // Load Socket.IO client then connect. Retry a couple times if necessary.
        (async function initRealtime() {
            let attempts = 0;
            const maxAttempts = 3;
            while (attempts < maxAttempts) {
                try {
                    await loadSocketIoScript(4000);
                    connectSocket();
                    return;
                } catch (err) {
                    attempts += 1;
                    console.warn('Socket.IO load attempt', attempts, 'failed:', err.message);
                    lobbyError.textContent = 'Realtime client failed to load. Retrying... (' + attempts + ')';
                    // small delay before retry
                    await new Promise(r => setTimeout(r, 800));
                }
            }
            // Try common localhost ports explicitly as a fallback (useful if the page is being served
            // by a different server or by VS Code Live Preview).
            const fallbackHosts = ['http://localhost:3000', 'http://localhost:5000'];
            for (const host of fallbackHosts) {
                try {
                    lobbyError.textContent = 'Attempting to load realtime client from ' + host;
                    await loadSocketIoScript(3000, host);
                    connectSocket();
                    return;
                } catch (e) {
                    console.warn('Fallback load failed from', host, e.message);
                }
            }

            lobbyError.innerHTML = 'Realtime client could not be loaded. Make sure you opened the app from the server (e.g. http://localhost:3000 or :5000), not from Live Preview or the filesystem.';
            switchSection('lobby');
        })();
    </script>

</body>
</html>
